▶▶▶▶▶▶▶ Hibernate, JPA 애너테이션 설명
=========================== 링크 ===========================
https://joont92.github.io/jpa/JPQL/     (JPQL에 대해서)
https://joont92.github.io/jpa/%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91/
(@OneToOne, @OneToMany, @ManyToOne, @ManyToMany에 대해서)

https://www.baeldung.com/jpa-many-to-many (@ManyToMany에 대해서)

https://joont92.github.io/jpa/%EA%B3%A0%EA%B8%89-%EB%A7%A4%ED%95%91/ (복합키(composite primary keys)에 대해서)
https://www.baeldung.com/jpa-composite-primary-keys (복합키에 대해서)
https://www.baeldung.com/jpa-embedded-embeddable

https://www.objectdb.com/api/java/jpa/MapsId (여러가지 애너테이션 설명)
https://docs.jboss.org/hibernate/orm/5.3/userguide/html_single/Hibernate_User_Guide.html#annotations-jpa-mapsid (여러가지 애너테이션 설명)
==========================================================================

<복합키 관계>
▶ 복합키(복합 식별자)는 하나 이상의 영구 속성(attributes)과 통신한다. JPA 설명서에 있는 복합키를 관리하는 몇가지 규칙이 있다.
- 복합키는 "primary key class"에 의해 나타내야 한다
(primary key class를 정의하는 방법은 javax.persistence.EmbeddedId 애너테이션 또는 javax.persistence.IdClass 애너테이션으로 나타낼 수 있다.)
- primary key class는 public이어야 하고, public 기본생성자(no-arg constructor)를 가져야 한다.
- primary key class는 Serializable인터페이스를 구현해야 한다
- primary key class는 equals(), hashCode() 메서드를 정의해야 한다

@IdClass 방식 VS @EmbeddedId 방식




▶ @MapsId(value="empid")
-@EmbeddedId 방식에서 사용함
-일대일(One-To-One) 또는 다대일(Many-To-One) 관계에서 primary key로 사용되는 애트리뷰트를 명시할 때 사용된다
-(선택 사항) 관계 속성이 해당하는 복합 키 내의 속성 이름입니다. 제공되지 않은 경우 관계는 항목의 기본 키를 매핑합니다.

Target: Fields (including property get methods)
Designates a ManyToOne or OneToOne relationship attribute that provides the mapping for an EmbeddedId primary key, an attribute within an EmbeddedId primary key, or a simple primary key of the parent entity. 
The value element specifies the attribute within a composite key to which the relationship attribute corresponds. 
If the entity's primary key is of the same Java type as the primary key of the entity referenced by the relationship, the value attribute is not specified.

Example:

    // parent entity has simple primary key

    @Entity
    public class Employee {
       @Id 
       long empId;
       String name;
       ...
    } 

    // dependent entity uses EmbeddedId for composite key

    @Embeddable
    public class DependentId {
       String name;
       long empid;   // corresponds to primary key type of Employee
    }

    @Entity
    public class Dependent {
       @EmbeddedId 
       DependentId id;
        ...
       @MapsId("empid")  //  maps the empid attribute of embedded id
       @ManyToOne 
       Employee emp;
    }






▶ @Embedded

Target: Fields (including property get methods)
Specifies a persistent field or property of an entity whose value is an instance of an embeddable class. 
The embeddable class must be annotated as Embeddable.
The AttributeOverride, AttributeOverrides, AssociationOverride, and AssociationOverrides annotations 
may be used to override mappings declared or defaulted by the embeddable class.

Example:

   @Embedded
   @AttributeOverrides({
       @AttributeOverride(name="startDate", column=@Column("EMP_START")),
       @AttributeOverride(name="endDate", column=@Column("EMP_END"))
   })
   public EmploymentPeriod getEmploymentPeriod() { ... }





▶ @AttributeOverride
Target: Classes and fields (including property get methods)
Used to override the mapping of a Basic (whether explicit or default) property or field or Id property or field.
May be applied to an entity that extends a mapped superclass or to an embedded field or property 
to override a basic mapping or id mapping defined by the mapped superclass or embeddable class (or embeddable class of one of its attributes).

May be applied to an element collection containing instances of an embeddable class or to a map collection whose key and/or value is an embeddable class. 
When AttributeOverride is applied to a map, "key." or "value." must be used to prefix the name of the attribute that is being overridden by order to specify it as part of the map key or map value.

To override mappings at multiple levels of embedding, a dot (".") notation form must be used in the name element to indicate an attribute within an embedded attribute. 
The value of each identifier used with the dot notation is the name of the respective embedded field or property.

If AttributeOverride is not specified, the column is mapped the same as in the original mapping.





Example 1:

    @Embeddable public class Address {
        protected String street;
        protected String city;
        protected String state;
        @Embedded protected Zipcode zipcode;
    }

    @Embeddable public class Zipcode {
        protected String zip;
        protected String plusFour;
    }

    @Entity public class Customer {
        @Id protected Integer id;
        protected String name;
        @AttributeOverrides({
            @AttributeOverride(name="state",
                               column=@Column(name="ADDR_STATE")),
            @AttributeOverride(name="zipcode.zip",
                               column=@Column(name="ADDR_ZIP"))
        })
        @Embedded protected Address address;
        ...
    }



Example 2:

    @Entity public class PropertyRecord {
        @EmbeddedId 
        PropertyOwner owner;
        
        @AttributeOverrides({
            @AttributeOverride(name="key.street", 
                               column=@Column(name="STREET_NAME")),
            @AttributeOverride(name="value.size", 
                               column=@Column(name="SQUARE_FEET")),
            @AttributeOverride(name="value.tax", 
                               column=@Column(name="ASSESSMENT"))
        })
       @ElementCollection
       Map parcels;
    }

   @Embeddable public class PropertyInfo {
       Integer parcelNumber;
       Integer size;
       BigDecimal tax;
   }









▶ @Embeddable

Target: Classes
Defines a class whose instances are stored as an intrinsic(고유한, 본질적인) part of an owning entity 
and share the identity of the entity. 
Each of the persistent properties or fields of the embedded object is mapped to the database table for the entity.

Note that the Transient annotation may be used to designate the non-persistent state of an embeddable class.


Example 1:

    @Embeddable public class EmploymentPeriod { 
       @Temporal(DATE) java.util.Date startDate;
       @Temporal(DATE) java.util.Date endDate;
      ... 
    }

Example 2:

    @Embeddable public class PhoneNumber {
        protected String areaCode;
        protected String localNumber;

        @ManyToOne 
        PhoneServiceProvider provider;
        ...
    }

    @Entity public class PhoneServiceProvider {
        @Id 
        protected String name;
         ...
    }

Example 3:

    @Embeddable public class Address {
       protected String street;
       protected String city;
       protected String state;

       @Embedded 
       protected Zipcode zipcode;
    }

    @Embeddable public class Zipcode {
       protected String zip;
       protected String plusFour;
     }

Example 4:

@Entity(name = "SystemUser")
public static class SystemUser {

        @EmbeddedId
        private PK pk;

        private String name;

        //Getters and setters are omitted for brevity
}

@Embeddable
public static class PK implements Serializable {

        private String subsystem;

        private String username;

        public PK(String subsystem, String username) {
                this.subsystem = subsystem;
                this.username = username;
        }

        private PK() {
        }

        @Override
        public boolean equals(Object o) {
                if ( this == o ) {
                        return true;
                }
                if ( o == null || getClass() != o.getClass() ) {
                        return false;
                }
                PK pk = (PK) o;
                return Objects.equals( subsystem, pk.subsystem ) &&
                                Objects.equals( username, pk.username );
        }

        @Override
        public int hashCode() {
                return Objects.hash( subsystem, username );
        }
}


Example 5:

@Entity(name = "SystemUser")
public static class SystemUser {

        @EmbeddedId
        private PK pk;

        private String name;

        //Getters and setters are omitted for brevity
}

@Entity(name = "Subsystem")
public static class Subsystem {

        @Id
        private String id;

        private String description;

        //Getters and setters are omitted for brevity
}

@Embeddable
public static class PK implements Serializable {

        @ManyToOne(fetch = FetchType.LAZY)
        private Subsystem subsystem;

        private String username;

        public PK(Subsystem subsystem, String username) {
                this.subsystem = subsystem;
                this.username = username;
        }

        private PK() {
        }

        @Override
        public boolean equals(Object o) {
                if ( this == o ) {
                        return true;
                }
                if ( o == null || getClass() != o.getClass() ) {
                        return false;
                }
                PK pk = (PK) o;
                return Objects.equals( subsystem, pk.subsystem ) &&
                                Objects.equals( username, pk.username );
        }

        @Override
        public int hashCode() {
                return Objects.hash( subsystem, username );
        }
}





▶ @JoinColumns

Target: Fields (including property get methods)
Defines mapping for composite foreign keys. This annotation groups JoinColumn annotations for the same relationship.
When the JoinColumns annotation is used, both the name and the referencedColumnName elements must be specified in each such JoinColumn annotation.

Example:
    @ManyToOne
    @JoinColumns({
        @JoinColumn(name="ADDR_ID", referencedColumnName="ID"),
        @JoinColumn(name="ADDR_ZIP", referencedColumnName="ZIP")
    })
    public Address getAddress() { return address; }




▶ @JoinTable

Target: Fields (including property get methods)
연관관계를 매핑하는데 사용되고, @JoinTable 애너테이션은 연관관계의 소유측(owning side)에 명시된다.
조인 테이블은 다중성(one-to-one/many-to-one/one-to-many/many-to-many), 방향(단방향/양방향) 상관없이 모든 연관관계를 매핑하는데 사용될 수 있다.
When a join table is used in mapping a relationship with an embeddable class on the owning side of the relationship, the containing entity rather than the embeddable class is considered the owner of the relationship.
만약 @JoinTable 애너테이션을 생략하면, 기본값들이 적용된다. name은 밑줄을 사용하여 함께 연결된 (소유측 먼저) 연관된 기본 테이블의 테이블 이름으로 간주됩니다.

Example:

    @JoinTable(
        name="CUST_PHONE",
        joinColumns=
            @JoinColumn(name="CUST_ID", referencedColumnName="ID"),
        inverseJoinColumns=
            @JoinColumn(name="PHONE_ID", referencedColumnName="ID")
    )



<Relationships>==============================================================================================================================================================================================================================================

▶ @OneToOne

Target: Fields (including property get methods)
Defines a single-valued association to another entity that has one-to-one multiplicity(다수, 다양성).
It is not normally necessary to specify the associated target entity explicitly since it can usually be inferred from the type of the object being referenced.
If the relationship is bidirectional, the non-owning side must use the mappedBy element of the OneToOne annotation to specify the relationship field or property of the owning side.

The OneToOne annotation may be used within an embeddable class to specify a relationship from the embeddable class to an entity class.
If the relationship is bidirectional and the entity containing the embeddable class is on the owning side of the relationship, the non-owning side must use the mappedBy element of the OneToOne annotation to specify the relationship field or property of the embeddable class.
The dot (".") notation syntax must be used in the mappedBy element to indicate the relationship attribute within the embedded attribute.
The value of each identifier used with the dot notation is the name of the respective embedded field or property.



Example 1: One-to-one association that maps a foreign key column

    // On Customer class:

    @OneToOne(optional=false)
    @JoinColumn(
     name="CUSTREC_ID", unique=true, nullable=false, updatable=false)
    public CustomerRecord getCustomerRecord() { return customerRecord; }

    // On CustomerRecord class:

    @OneToOne(optional=false, mappedBy="customerRecord")
    public Customer getCustomer() { return customer; }


Example 2: One-to-one association that assumes both the source and target share the same primary key values.

    // On Employee class:

    @Entity
    public class Employee {
     @Id 
     Integer id;
    
     @OneToOne 
     @MapsId
     EmployeeInfo info;
     ...
    }

    // On EmployeeInfo class:

    @Entity
    public class EmployeeInfo {
     @Id 
     Integer id;
     ...
    }


Example 3: One-to-one association from an embeddable class to another entity.

    @Entity
    public class Employee {
       @Id int id;
       @Embedded LocationDetails location;
       ...
    }

    @Embeddable
    public class LocationDetails {
       int officeNumber;
       @OneToOne ParkingSpot parkingSpot;
       ...
    }

    @Entity
    public class ParkingSpot {
       @Id int id;
       String garage;
       @OneToOne(mappedBy="location.parkingSpot") Employee assignedTo;
        ... 
    }




▶ @OneToMany

Target: Fields (including property get methods)
Defines a many-valued association with one-to-many multiplicity.
If the collection is defined using generics to specify the element type, the associated target entity type need not be specified;
otherwise the target entity class must be specified.
If the relationship is bidirectional, the  mappedBy element must be used to specify the relationship field or property of the entity that is the owner of the relationship.

The OneToMany annotation may be used within an embeddable class contained within an entity class to specify a relationship to a collection of entities.
If the relationship is bidirectional, the  mappedBy element must be used to specify the relationship field or property of the entity that is the owner of the relationship.
When the collection is a java.util.Map, the cascade element and the orphanRemoval element apply to the map value.



Example 1: One-to-Many association using generics

    // In Customer class:

    @OneToMany(cascade=ALL, mappedBy="customer")
    public Set getOrders() { return orders; }

    

    In Order class:

    @ManyToOne
    @JoinColumn(name="CUST_ID", nullable=false)
    public Customer getCustomer() { return customer; }
    

Example 2: One-to-Many association without using generics

    // In Customer class:

    @OneToMany(targetEntity=com.acme.Order.class, cascade=ALL,
                mappedBy="customer")
    public Set getOrders() { return orders; }


    // In Order class:

    @ManyToOne
    @JoinColumn(name="CUST_ID", nullable=false)
    public Customer getCustomer() { return customer; }


Example 3: Unidirectional One-to-Many association using a foreign key mapping

    // In Customer class:

    @OneToMany(orphanRemoval=true)
    @JoinColumn(name="CUST_ID") // join column is in table for Order
    public Set getOrders() {return orders;}




▶ @ManyToOne

Target: Fields (including property get methods)
Defines a single-valued association to another entity class that has many-to-one multiplicity.
It is not normally necessary to specify the target entity explicitly since it can usually be inferred from the type of the object being referenced.
If the relationship is bidirectional, the non-owning OneToMany entity side must used the mappedBy element to specify the relationship field or property of the entity that is the owner of the relationship.

The ManyToOne annotation may be used within an embeddable class to specify a relationship from the embeddable class to an entity class.
If the relationship is bidirectional, the non-owning OneToMany entity side must use the mappedBy element of the OneToMany annotation to specify the relationship field or property of the embeddable field or property on the owning side of the relationship.
The dot (".") notation syntax must be used in the mappedBy element to indicate the relationship attribute within the embedded attribute.
The value of each identifier used with the dot notation is the name of the respective embedded field or property.



Example 1:

     @ManyToOne(optional=false) 
     @JoinColumn(name="CUST_ID", nullable=false, updatable=false)
     public Customer getCustomer() { return customer; }


Example 2:
 
     @Entity
     public class Employee {
        @Id 
        int id;
        @Embedded 
        JobInfo jobInfo;
        ...
     }

     @Embeddable
     public class JobInfo {
        String jobDescription; 
        @ManyToOne 
        ProgramManager pm; // Bidirectional
     }

     @Entity
     public class ProgramManager {
        @Id 
        int id;
        @OneToMany(mappedBy="jobInfo.pm")
        Collection manages;
     }



▶ @ManyToMany

Target: Fields (including property get methods)
Defines a many-valued association with many-to-many multiplicity.
Every many-to-many association has two sides, the owning side and the non-owning, or inverse, side.
The join table is specified on the owning side.
If the association is bidirectional, either side may be designated as the owning side.
If the relationship is bidirectional, the non-owning side must use the mappedBy element of the ManyToMany annotation to specify the relationship field or property of the owning side.

The ManyToMany annotation may be used within an embeddable class contained within an entity class to specify a relationship to a collection of entities.
If the relationship is bidirectional and the entity containing the embeddable class is the owner of the relationship, the non-owning side must use the mappedBy element of the ManyToMany annotation to specify the relationship field or property of the embeddable class.
The dot (".") notation syntax must be used in the mappedBy element to indicate the relationship attribute within the embedded attribute.
The value of each identifier used with the dot notation is the name of the respective embedded field or property.



Example 1:

    // In Customer class:

    @ManyToMany
    @JoinTable(name="CUST_PHONES")
    public Set getPhones() { return phones; }

    // In PhoneNumber class:

    @ManyToMany(mappedBy="phones")
    public Set getCustomers() { return customers; }
     
    

Example 2:

    // In Customer class:

    @ManyToMany(targetEntity=com.acme.PhoneNumber.class)
    public Set getPhones() { return phones; }

    // In PhoneNumber class:

    @ManyToMany(targetEntity=com.acme.Customer.class, mappedBy="phones")
    public Set getCustomers() { return customers; }


Example 3:

    // In Customer class:

    @ManyToMany
    @JoinTable(name="CUST_PHONE",
        joinColumns=
            @JoinColumn(name="CUST_ID", referencedColumnName="ID"),
        inverseJoinColumns=
            @JoinColumn(name="PHONE_ID", referencedColumnName="ID")
        )
    public Set getPhones() { return phones; }

    // In PhoneNumberClass:

    @ManyToMany(mappedBy="phones")
    public Set getCustomers() { return customers; }














