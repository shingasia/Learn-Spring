▶▶▶▶▶▶▶ Hibernate, JPA 애너테이션 설명
=========================== 링크 ===========================
https://velog.io/@conatuseus/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%A4%ED%95%91
https://velog.io/@conatuseus/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%A4%ED%95%91-2-msk0kq84v5
https://dololak.tistory.com/425

https://www.programcreek.com/java-api-examples/index.php?api=org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean
(DataSource, LocalContainerEntityManagerFactoryBean 설정)
==========================================================================
spring.jpa.hibernate.ddl-auto 설정이 create 또는 update로 되어있으면 EntityManager가 자동으로 DDL을 수행해 테이블을 생성함

hibernate.hbm2ddl.auto 속성
1) create (기존 테이블을 삭제하고 새로 생성한다. DROP+CREATE)
2) create-drop (create 속성에 추가로 애플리케이션을 종료할 때 생성한 DDL을 제거한다 DROP+CREATE+DROP)
3) update (데이터베이스 테이블과 엔터티 매핑정보를 비교해서 변경 사항만 수정한다)
4) validate (데이터베이스 테이블과 엔터티 매핑정보를 비교해서 차이가 있으면 경고를 남기고 애플리케이션을 실행하지 않는다. 이 설정은 DDL을 수정하지 않음)
5) none (기본값)


▶ @Entity
- 해당 엔터티가 매핑된 엔터티 클래스임을 나타낸다.
- @Table(name="db_테이블명"), @Column(name="db_칼럼명") 과 같이 쓴다
각 매핑 애트리뷰트에는 칼럼 이름을 지정한 @Column 애너테이션을 적용한다
- name 속성을 설정하지 않으면 클래스 이름을 그대로 사용

》》》 테이블 이름이 클래스 타입과 같다면 테이블 이름을, 칼럼 이름이 애트리뷰트 이름과 같다면 칼럼 이름을 생략할 수 있다.

▶ @Column
- 데이터베이스의 테이블에 있는 칼럼명과 동일하게 1:1로 매칭된다.
- Entity 클래스안에 내부변수로 정의된다. 만약 테이블에 a, b, c칼럼이 있다면 각각 3개의 @Column 애너테이션을 작성
(다만 이때 의도적으로 필요없는 칼럼들은 작성하지 않아도 된다 즉, 데이터베이스 테이블에 실제 a, b, c, d 4개의 칼럼이 있더라도
a, b, c 칼럼만 Entity 클래스에 작성해도 무방하다)
- @Column 애너테이션도 @Entity 애너테이션과 동일하게 name 속성을 명시하지 않으면 Entity 클래스에 정의한 칼럼 변수의 이름으로 생성된다.

▶ @Id
- 데이터베이스 테이블의 PK(Primary Key)를 뜻함
(하이버네이트는 세션 내에서 엔터티 인스턴스를 매핑할 때 id 애트리뷰트를 고유 식별자로 사용합니다.)
- 데이터베이스는 엔터티를 구별할 때 이 키값으로 구별한다


▶ @GeneratedValue(strategy=GenerationType.IDENTITY)
- auto increment 칼럼인 것을 EntityManager에 알려준다.

▶ @Embeddable
- 일반적인 경우에는 PK를 단일 @Id로 구성하지만 경우에 따라 복합키로서 테이블의 PK를 정의 하기도 한다.
복합키는 두 개 이상의 @Id로 구성이 되는데 이를 직접 Entity에 정의하는 것이 아니라 별도의 Value를 사용해 복합키를 정의

▶ @Transient
- 이 필드는 매핑하지 않습니다. 따라서 데이터베이스에 저장하지 않고 조회하지도 않습니다.
- 객체에 임시로 어떤 값을 보관하고 싶을 때 사용

▶ @Access
- JPA가 엔터티 데이터에 접근하는 방식을 지정
필드 접근: AccessType.FIELD는 필드에 직접 접근합니다. 필드 접근 권한이 private이어도 접근할 수 있습니다.
프로퍼티 접근: AccessType.PROPERTY로 지정합니다. 접근자(getter)를 사용합니다.


◆◆◆◆◆ 적용 위치에 따른 JPA 동작 방식 차이 ◆◆◆◆◆
JPA는 DB로부터 데이터를 읽어오거나, 삽입, 변경, 삭제할 때 엔티티 클래스의 맵핑 정보를 보고 직접 쿼리를 만들어 실행합니다. 
우리는 엔티티 클래스를 작성할 때 DB의 컬럼과 엔티티 클래스의 필드를 맵핑하기 위해 @Column, @Id, @Basic 등의 다양한 맵핑관련 애노테이션 설정을 작성하고, 
JPA는 이 정보를 바탕으로 쿼리 생성시에 맵핑정보로 활용합니다.
JPA는 @Id 애노테이션이 필드에 걸려있는지, getter 메서드에 걸려있는지에 따라 쿼리 생성시 필드를 이용할지 getter 메서드를 이용할지 판단하게 됩니다.
JPA는 @Id 애노테이션이 getter 메서드에 걸린 경우에는 JPA가 맵핑 정보를 판단하는데 있어서 모든 필드에 대한 getter 메서드를 기준으로 참고합니다.

◆ 맵핑정보를 필드와 메서드에 둘 다 이용하여 설정하는 경우
만약 @Id를 getter 메서드에 설정하고 일부 맵핑정보는 필드에 설정하거나, 반대로 @Id 애노테이션을 필드에 설정하고 일부 맵핑정보만 메서드에 설정하고 싶은 경우가 있을 수 있는데, 
이때는 javax.persistence.Access 애노테이션(@Access) 를 사용하면 됩니다.

@Entity                                                                                
@Table(name = "user") 
public class User { 
     private String id; 
 
 
     @Column(name = "user_name") 
     @Access(AccessType.FIELD) 
     private String name; 
 
 
     ...생략... 
 
 
     @Id 
     public String getId() { 
           return id; 
     }
 
 
     public String getName() { 
           return name; 
     }
 
 
     ...생략... 
}


@Entity                                                                                
@Table(name = "user") 
public class User { 
     @Id 
     private String id; 
     private String name; 
 
 
     ...생략... 
     
     public String getId() { 
           return id; 
     }
 
 
     @Column(name = "user_name") 
     @Access(AccessType.PROPERTY) 
     public String getName() { 
           return name; 
     }
 
 
     ...생략... 
}

◆ @Access 애노테이션을 클래스에 걸어두는 경우
@Access를 클래스 단위에도 걸어둘 수 있는데, 
@Access에 할당된 값이 필드인 경우에는 @Id 애노테이션 또한 필드에 걸어주어야 합니다. 
만약 클래스에 @Access(AccessType.PROPERTY)를 설정한 경우에 @Id를 getter 메서드에 걸지 않는 경우 예외가 발생합니다.

특정 대상에 대해서만 클래스에 설정된 @Access를 따르지 않는경우 
이전과 마찬가지로 원하는 대상의 필드나 메서드에 @Access를 사용합니다.
예를 들어 엔터티 클래스에는 @Access(AccessType.FIELD)를 사용한 경우 당연히 @Id 는 필드에 걸어야 합니다. 
그런데 name에 대해서는 메서드를 맵핑에 사용하고 싶다면 getName() 메서드에 @Access(AccessType.PROPERTY)를 걸어주면 됩니다.

@Entity                                                                                
@Table(name = "user") 
@Access(AccessType.FIELD) 
public class User { 
     @Id 
     private String id; 
     private String name; 
     ...생략... 
     
     public String getId() { 
           return id; 
     }
 
 
     @Column(name = "user_name") 
     @Access(AccessType.PROPERTY) 
     public String getName() { 
           return name; 
     }
     ...생략... 
}















