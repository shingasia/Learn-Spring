https://www.baeldung.com/spring-security-expressions
https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/el-access.html

스프링 시큐리티 표현식(expression)

// 해당 권한이 있으면 true
hasRole([role])
hasAuthority([authority])

// 여러 권한들 중에서 하나라도 해당하는 권한이 있으면 true
hasAnyRole([role1, role2])
hasAnyAuthority([authority1, authority2])

▶ hasAuthority, hasAnyAuthority 차이점
역할과 권한은 Spring에서 비슷합니다.
주된 차이점은 역할이 특별한 의미를 갖는다는 것입니다. 
Spring Security 4부터는 ' ROLE_ '접두사가 역할 관련 방법에 의해 자동으로 추가됩니다 (아직없는 경우).
따라서 hasAuthority ('ROLE_ADMIN') 은 ' ROLE_ '접두사가 자동으로 추가 되기 때문에 hasRole('ADMIN') 과 유사합니다

// 현재 사용자의 정보를 나타내는 principal 객체에 직접 접근할 수 있다.
principal

// SecurityContext로 부터 얻은 Authentication 객체에 접근할 수 있다.
authenication

// 모든 사용자에게 허용 -> 항상 true로 평가된다
permitAll

// 모든 사용자에게 거부 -> 항상 false로 평가된다
denyAll

// 현재 사용자가 익명사용자(로그인을 하지 않은 경우도 해당) 이면 true를 반환
isAnonymous()

// 현재 로그인된 사용자가 remember-me 사용자이면 true를 반환(로그인 정보 기억 기능에 의한 사용자)
isRememberMe()

// 현재 사용자가 인증된 사용자라면 true를 반환
isAuthenicated()

// Remember-me로 인증된 것이 아닌 인증된 사용자인 경우 true -> 아이디/비밀번호로 로그인 한 경우
isFullyAuthenicated()

/*
   Returns true if the user has access to the provided target for the given permission. 
   For example, hasPermission(domainObject, 'read')
*/
hasPermission(Object target, Object permission)

/*
   Returns true if the user has access to the provided target for the given permission. 
   For example, hasPermission(1, 'com.example.domain.Message', 'read')
*/
hasPermission(Object targetId, String targetType, Object permission)














